function completion/xbps::all_packages {
	while read -r _ name desc; do
		complete -P "$PREFIX" -D "$desc" -- "$name"
	done <(xbps-query -Rs '')
}

function completion/xbps::installed_packages {
	while read -r _ name desc; do
		complete -P "$PREFIX" -D "$desc" -- "$name"
	done <(xbps-query -l)
}

function completion/xbps-install {
	typeset OPTIONS ARGOPT PREFIX
	OPTIONS=( #>#
	"A --automatic; Set automatic installation mode"
	"c --cachedir:; Full path to cachedir"
	"n --dry-run; Dry-run mode"
	"f --force; Force package re-installation"
	"i --ignore-conf-repos; Ignore repositories defined in xbps.d"
	"M --memory-sync; Keep remote repository data in memory only"
	"R: --repository:; Add repository to the top of the list"
	"S --sync; Sync remote repository index"
	"u --update; Update target packages"
	"U --unpack-only; Unpack packages without configuring"
	"y --yes; Assume yes to all questions"
	) #<#

	command -f completion//parseoptions ${long:+-es}
	case $ARGOPT in
	(-)
		command -f completion//completeoptions
		;;
	(R|--repository)
		complete -P "$PREFIX" -d
		;;
	(*)
		command -f completion/xbps::all_packages
		;;
	esac
}

function completion/xbps-pkgdb {
	typeset OPTIONS ARGOPT PREFIX
	OPTIONS=( #>#
	"a --all; Process all packages"
	"m: --mode:; Change to this mode"
	"u --update; Update pkgdb to the latest format"
	) #<#
	command -f completion//parseoptions ${long:+-es}
	case $ARGOPT in
	(-)
		command -f completion//completeoptions
		;;
	(m|--mode)
		complete -P "$PREFIX" -- auto manual hold unhold repolock repounlock
		;;
	(*)
		command -f completion/xbps::installed_packages
		;;
	esac
}

function completion/xbps-src::all_packages {
	for p in srcpkgs/*/template; do
		complete -P "$PREFIX" -- ${{p%/template}#srcpkgs/}
	done
}
function completion/xbps-src::destdir_packages {
	for p in srcpkgs/*/template; do
		complete -P "$PREFIX" -- ${{p%/template}#srcpkgs/}
	done
}
function completion/xbps-src::build_packages {
	for p in srcpkgs/*/template; do
		complete -P "$PREFIX" -- ${{p%/template}#srcpkgs/}
	done
}
function completion/xbps-src {
	typeset OPTIONS ARGOPT PREFIX
	OPTIONS=( #>#
	"a:; Cross compile packages"
	"C; Do not remove build directory/autodeps/destdir"
	"E; Exit immediately when binary package already exists"
	"f; Force building and registering binary packages"
	"G; Enable XBPS_USE_GIT_REVS"
	"g; Enable building -dbg packages"
	"H:; Absolute path to hostdir"
	"h; Help"
	"I; Ignore required dependencies"
	"j; Number of parallel build jobs"
	"L; Disable ASCII colors"
	"m:; Absolute path to masterdir"
	"N; Disable use of remote repositories"
	"o; Set package build options"
	"r; Use alternative local repository"
	"t; Create a temporary masterdir"
	) #<#
	command -f completion//parseoptions ${long:+-es}
	case $ARGOPT in
	(-)
		command -f completion//completeoptions
		;;
	(a)
		complete -P "$PREFIX" -- armv6hf-musl armv6hf armv7hf-musl \
			armv7hf i686-musl i686 mips mipsel x86_64-musl
		;;
	(m|H)
		complete -d
		;;
	(*)
		command -f completion//getoperands
		case ${WORDS[#]} in
		(0)
			complete -P "$PREFIX" -- binary-bootstrap bootstrap \
				bootstrap-update \
				build chroot clean configure extract fetch install \
				list pkg remove remove-autodeps show show-build-deps \
				show-deps show-files show-options show-shlib-provides \
				show-shlib-requires show-var show-repo-updates \
				show-sys-updates update-bulk update-check update-sys zap
			;;
		(*)
			case ${WORDS[-1]} in
			(build|configure|extract|fetch|install|pkg|show|show-build-deps|update-check)
				command -f completion/xbps-src::all_packages
				;;
			(binary-bootstrap)
				;;
			(clean)
				command -f completion/xbps-src::build_packages
				;;
			(remove|show-deps|show-files|show-options|show-shlib-provides|show-shlib-requires)
				command -f completion/xbps-src::destdir_packages
				;;
			esac
			;;
		esac
		;;
	esac
}
